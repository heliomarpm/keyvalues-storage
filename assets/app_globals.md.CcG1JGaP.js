import{_ as t,c as a,o as s,ae as o}from"./chunks/framework.CwTn0328.js";const y=JSON.parse('{"title":"@heliomarpm/kvs","description":"","frontmatter":{},"headers":[],"relativePath":"app/globals.md","filePath":"app/globals.md","lastUpdated":null}'),r={name:"app/globals.md"};function d(l,e,i,p,n,h){return s(),a("div",null,e[0]||(e[0]=[o('<h1 id="heliomarpm-kvs" tabindex="-1">@heliomarpm/kvs <a class="header-anchor" href="#heliomarpm-kvs" aria-label="Permalink to &quot;@heliomarpm/kvs&quot;">​</a></h1><h2 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td><a href="./classes/KeyValues">KeyValues</a></td><td>KeyValues is a class that provides a simple key-value storage system. It allows you to set, get, check existence, and remove key-value pairs in a JSON file. It supports nested keys and complex data types, and provides both asynchronous and synchronous methods</td></tr></tbody></table><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/KeyPath">KeyPath</a></td><td><code>KeyPath</code> is a type that represents a key path in a key-value pair.</td></tr><tr><td><a href="./type-aliases/Options">Options</a></td><td><code>Options</code> types contain all the configuration options for Options that can be set in the constructor of KeyValues Class</td></tr><tr><td><a href="./type-aliases/RecordType">RecordType</a></td><td><code>RecordType</code> is a type that represents an object with string keys and values of type <code>T</code>, where <code>T</code> is a subtype of <code>ValueType</code>.</td></tr><tr><td><a href="./type-aliases/ValueType">ValueType</a></td><td><code>ValueType</code> is a type that represents the possible values that can be stored in a key-value pair.</td></tr></tbody></table>',5)]))}const u=t(r,[["render",d]]);export{y as __pageData,u as default};
